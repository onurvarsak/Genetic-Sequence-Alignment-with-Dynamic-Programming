import numpy as np
import sys

######################################################################################################
######################################################################################################
######################################################################################################
###########################                                            ###############################
###########################         READ AND WRITE A FILE              ###############################
###########################                                            ###############################
######################################################################################################
######################################################################################################
######################################################################################################

def FileRead():
    file = open(sys.argv[1], "r")
    input = file.read()
    list = input.split("\n")
    file.close()
    return list

#--------------------------------------------------------------------
    
def FileWrite(string):
    file = open(sys.argv[2], "w")
    file.write(string)
    file.close()

######################################################################################################
######################################################################################################
######################################################################################################
###########################                                            ###############################
###########################                 CREATING MATRIS            ###############################
###########################                                            ###############################
######################################################################################################
######################################################################################################
######################################################################################################

def createMatris():
    OPT = np.random.randint(0,1,size=(M+1,N+1))
    for i in range(M+1):
        #------------------------------------------------
        if i==M:
            #--------------------------------------------
            for j in range(N+1): 
                OPT[i][j] = 2*(N-j)
        #------------------------------------------------ 
        else: OPT[i][N] = 2*(M-i)
    return OPT
    
    
######################################################################################################
######################################################################################################
######################################################################################################
###########################                                            ###############################
###########################                 FILLING  MATRIS            ###############################
###########################                                            ###############################
###########################                 DYNAMIC METHOD             ###############################
######################################################################################################
######################################################################################################

def fillMatris(OPT):
    for i in range(M, 0, -1):
        for j in range(N, 0, -1):
            if X[i-1] == Y[j-1]:
                OPT[i-1][j-1] = min( OPT[i][j]+0, OPT[i-1][j]+2, OPT[i][j-1]+2 )
            else:
                OPT[i-1][j-1] = min( OPT[i][j]+1, OPT[i-1][j]+2, OPT[i][j-1]+2 )
    return OPT

######################################################################################################
######################################################################################################
######################################################################################################
###########################                                            ###############################
###########################            DYNAMIC SORTING COST            ###############################
###########################                                            ###############################
######################################################################################################
######################################################################################################
######################################################################################################

def sorting(OPT):
    i, j = 0, 0 
    new_Y=""
    title= "Edit Distance = "+str(OPT[0][0]) 
    
    while i <= M and j <= N:

        if i==M and j==N: break
        
        if i==M :
            new_Y +="-"
            j+=1
            continue
        elif j==N:
            new_Y += "-"
            i+=1
            continue
        
        cost, cost_right, cost_bottom, cost_dia = OPT[i][j], OPT[i][j+1]+2, OPT[i+1][j]+2, OPT[i+1][j+1]
        
        if X[i] != Y[j]:
            cost_dia += 1
        
        if cost_right < cost_bottom:
            if cost_right < cost_dia:
                new_Y += "-"
                j+=1
            else:
                new_Y += str(Y[j])
                i+=1
                j+=1 
        else:
            if cost_bottom < cost_dia:
                new_Y += "-"
                i += 1
            else:
                new_Y += str(Y[j])
                
                i+=1
                j+=1
    
    return title,new_Y


######################################################################################################
######################################################################################################
######################################################################################################
###########################                                            ###############################
###########################               MAIN PROGRAM                 ###############################
###########################                                            ###############################
######################################################################################################
######################################################################################################
######################################################################################################

list = FileRead()
X, Y = list[0], list[1]
#--------------------------------------------------------------------
a  = 0
if len(X) < len(Y):
    a = 1
    A = X
    X = Y
    Y = A
#--------------------------------------------------------------------
M, N = len(X),len(Y)
OPT = createMatris()
OPT = fillMatris(OPT)
Title, Y = sorting(OPT)
#--------------------------------------------------------------------
if a == 1:
    a = 0
    A = X
    X = Y
    Y = A
#--------------------------------------------------------------------    
for i in range(len(X)):
    if X[i] == Y[i]:
        Title += "\n"+str(X[i])+" "+str(Y[i])+" 0"
    else:
        if X[i]=="-" or Y[i]=="-":
            Title += "\n"+str(X[i])+" "+str(Y[i])+" 2"
        else:
            Title += "\n"+str(X[i])+" "+str(Y[i])+" 1"
 #--------------------------------------------------------------------           
            
FileWrite(Title)

